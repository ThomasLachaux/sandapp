openapi: '3.0.0'

info:
  description: |
    Server A API for Make Me a Sandwich app in Web Development 2 - Architecting.
    Authentication is made with JWT.
  version: "1.0.0"
  title: Sand'App
  contact:
    email: xavier.finkelstein@tuni.fi
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'

servers:
  - url: 'http://127.0.0.1:3000'
    description: Local server

tags:
  - name: auth
    description: Login and register
  - name: orders
    description: Operations about orders
  - name: sandwiches
    description: Operations about sandwiches
  - name: users
    description: Operations about users

paths:
  /auth/login:
    post:
      tags:
        - auth
      summary: Login in the application
      operationId: login
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: 'Unauthorized. Invalid credentials.'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
  /auth/register:
    post:
      tags:
        - auth
      summary: Register in the application
      operationId: register
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        409:
          description: 'Username already taken.'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
  /orders:
    get:
      tags:
        - orders
      summary: Get all orders (administrators only)
      operationId: getOrders
      security:
      - BearerAuth: []
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
    post:
      tags:
        - orders
      summary: Send an order
      operationId: postOrder
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                      quantity:
                        type: integer
                        format: int64
      responses:
        201:
          description: 'Created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: 'Bad request'
  '/orders/{orderId}':
    get:
      tags:
        - orders
      summary: Get order by ID (administrators only)
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order to return
          required: true
          schema:
            type: string
            format: MongoDB ObjectId
      security:
      - BearerAuth: []
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
  /sandwiches:
    get:
      tags:
        - sandwiches
      summary: Get all sandwiches
      operationId: getSandwiches
      security:
      - BearerAuth: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sandwich'
    post:
      tags:
        - sandwiches
      summary: Add a sandwich (administrators only)
      operationId: addSandwich
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                toppings:
                  type: array
                  items:
                    type: string
                breadType:
                  type: string
      responses:
        '201':
          description: 'Created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sandwich'
        '400':
          description: 'Bad request'
  '/sandwiches/{sandwichId}':
    get:
      tags:
        - sandwiches
      summary: Get sandwich by ID (administrators only)
      operationId: getSandwichById
      parameters:
        - name: sandwichId
          in: path
          description: ID of sandwich to return
          required: true
          schema:
            type: string
            format: MongoDB ObjectId
      security:
      - BearerAuth: []
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sandwich'
        '404':
          description: Sandwich not found
    put:
      tags:
        - sandwiches
      summary: Update a sandwich (administrators only)
      operationId: updateSandwich
      parameters:
        - name: sandwichId
          in: path
          description: ID of sandwich to update
          required: true
          schema:
            type: string
            format: MongoDB ObjectId
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                toppings:
                  type: array
                  items:
                    type: string
                breadType:
                  type: string
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sandwich'
        '403':
          description: Bad request
        '404':
          description: Sandwich not found
    delete:
      tags:
        - sandwiches
      summary: Delete a sandwich  (administrators only)
      operationId: deleteSandwich
      parameters:
        - name: sandwichId
          in: path
          description: ID of sandwich to delete
          required: true
          schema:
            type: string
            format: MongoDB ObjectId
      security:
      - BearerAuth: []
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sandwich'
        '404':
          description: Sandwich not found
  /users:
    get:
      tags:
        - users
      summary: Get all users (administrators only)
      operationId: getUsers
      security:
      - BearerAuth: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /users/me:
    get:
      tags:
        - users
      summary: Get current user
      description: Current user ID is based on JWT.
      operationId: getSelf
      security:
      - BearerAuth: []
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    patch:
      tags:
        - users
      summary: Change current user's username or password
      description: Current user ID is based on JWT.
      operationId: updateSelf
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
  /users/me/orders:
    get:
      tags:
        - users
      summary: Get current user's orders history
      description: Current user ID is based on JWT.
      operationId: getOrdersForSelf
      security:
      - BearerAuth: []
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '404':
          description: User not found
  '/users/{userId}':
    get:
      tags:
        - users
      summary: Get a user by ID (administrators only)
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: string
            format: MongoDB ObjectId
      security:
      - BearerAuth: []
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Sandwich not found
    patch:
      tags:
        - users
      summary: Set or unset a user as admin (administrators only)
      operationId: setUserAsAdmin
      parameters:
        - name: userId
          in: path
          description: ID of user to set as admin
          required: true
          schema:
            type: string
            format: MongoDB ObjectId
      security:
      - BearerAuth: []
      responses:
        200:
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    delete:
      tags:
        - users
      summary: Delete a user  (administrators only)
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: ID of user to delete
          required: true
          schema:
            type: string
            format: MongoDB ObjectId
      security:
      - BearerAuth: []
      responses:
        200:
          description: 'OK'
        '404':
          description: User not found
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Order:
      type: object
      properties:
        _id:
          type: string
          format: ObjectId
          example: '6061ded25d221612f44d1eb3'
        displayId:
          type: string
          format: nanoid
        madeBy:
          type: string
          format: ObjectId
          example: '6051ded25d221612f44d1eb6'
        status:
          type: string
          enum:
            - pending
            - delivered
            - cancelled
            - failed
        content:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: "Sandwich"
              quantity:
                type: integer
                example: 1
        createdAt:
          type: string
          format: date-time
      xml:
        name: Order
    Sandwich:
      type: object
      properties:
        _id:
          type: string
          format: ObjectId
          example: '6061ded25d221612f67f1eb3'
        name:
          type: string
        toppings:
          type: array
          items:
            type: string
        breadType:
          type: string
      xml:
        name: Category
    User:
      type: object
      properties:
        _id:
          type: string
          format: ObjectId
          example: '6061ded25d225412f67f1eb3'
        username:
          type: string
        isAdmin:
          type: boolean
      xml:
        name: User
